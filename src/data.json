{
	"players": [
		{
			"id": "6f6c16a5-53cb-46e4-ae04-3c7b09274772",
			"name": "Michael Scott",
			"connected": true
		},
		{
			"id": "5a46ccc5-de78-4568-9ff6-21806babc890",
			"name": "Dwight Schrute",
			"connected": true
		},
		{
			"id": "167783bd-7a73-44bf-9c61-e442a5cd62ee",
			"name": "Jim Halpert",
			"connected": true
		},
		{
			"id": "a6a3f403-5845-4057-9b3b-88959a8c9186",
			"name": "Pam Beesly",
			"connected": true
		},
		{
			"id": "f9370ee5-bb3f-4637-aae1-171cef3f3182",
			"name": "Andy Bernard",
			"connected": true
		}
	],
	"issues": [
		{
			"id": "2d47a5df-0bb8-40a6-a4be-de93c0312f77",
			"acceptanceCriteria": "",
			"created": 1591237920000,
			"currentPoints": 1,
			"description": "The forbidden error message is used to let the user know that they are not allowed to see the app data on that account.",
			"epicId": "",
			"key": "EN-375",
			"originalPoints": 1,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "Forbidden message for EPManager and EPSupplier is missing",
			"type": "Bug"
		},
		{
			"id": "2e73abbd-97af-40a9-b604-684f6dae4e43",
			"acceptanceCriteria": "",
			"created": 1591061580000,
			"currentPoints": 2,
			"description": "The Admin API call to create users creates users successfully. The user list in the enrollment object continues to contain unique users.\nThe EPManager API call to create users creates duplicate users. The user list in the enrollment  object gets duplicate users.\n\n1. Create an RF enrollment and add a user.\n2. Save the enrollment as a draft\n3. Go back to the enrollment and add the same user.\n4. Save the enrollment again.\n5. Inspect the user list in the \"onboarding\" object and note that there are duplicate users.",
			"epicId": "",
			"key": "EN-362",
			"originalPoints": 2,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "Duplicate Users Can be created with two different API calls",
			"type": "Bug"
		},
		{
			"id": "0f845e4b-ca7b-419d-b963-8eeae980c0b9",
			"acceptanceCriteria": "",
			"created": 1587016140000,
			"currentPoints": 5,
			"description": "",
			"epicId": "",
			"key": "EN-239",
			"originalPoints": 5,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "Downloading the Terms and Conditions PDF and opening it in Preview shows the user a blank document",
			"type": "Bug"
		},
		{
			"id": "c1a95efd-ce6e-4622-98c4-a5ea2aa11d9b",
			"acceptanceCriteria": "Get the following fields from TS Backend and pre-populate the form with these if the fields are missing:\n- Company Name\n- Company Address\n- Building Number\n- City\n- State\n- Postal Code\n- Country\n- Company ID\n- Tax ID\n- Phone Number",
			"created": 1587104340000,
			"currentPoints": 3,
			"description": "Currently user data is retrieved on Page 1 of the new enrollment flow to suggest to the seller.\n\nDo the same with company profile data such as company name, address and tax ID.",
			"epicId": "",
			"key": "EN-247",
			"originalPoints": 3,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "Retrieve Company Profile Data on Page 1",
			"type": "Story"
		},
		{
			"id": "4166c0cf-c328-4dcd-a0c3-8460ffe0a3ff",
			"acceptanceCriteria": "",
			"created": 1583918400000,
			"currentPoints": null,
			"description": "*Context:*\nThere is currently no server side validation of onboarding documents. This means that clients can _theoretically_ upload _any document_ to Tradeshift Early Payments while filling out an onboarding.\n\n*Action:*\nAs a developer, I need to restrict file type uploads on the server side to *JPEG*, *PNG*, and *PDF* in the Onboarding Controller.",
			"epicId": "",
			"key": "EN-121",
			"originalPoints": null,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "Add server-side document validation for onboarding documents",
			"type": "Task"
		},
		{
			"id": "11cfca2b-53d1-4273-b06d-23a80cdc91a3",
			"acceptanceCriteria": "",
			"created": 1590733020000,
			"currentPoints": null,
			"description": "HTTP 500 Error When adding a duplicate provider company.",
			"epicId": "",
			"key": "EN-337",
			"originalPoints": null,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "Adding the same company for an existing provider fails",
			"type": "Bug"
		},
		{
			"id": "9f73f764-dc0c-4666-aa9c-5fdbd8807478",
			"acceptanceCriteria": "",
			"created": 1590048300000,
			"currentPoints": 1,
			"description": "https://github.com/Tradeshift/tradeshift-early-payments/blob/master/early-payments-service/src/main/java/com/tradeshift/earlypayments/onboarding/service/RFOnboardingNotificationService.java\n\nUpdate getAgreementSigner() method to get the agreement signer",
			"epicId": "",
			"key": "EN-329",
			"originalPoints": 1,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "Email template does not show agreement signer name",
			"type": "Bug"
		},
		{
			"id": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"acceptanceCriteria": "",
			"created": 1577163060000,
			"currentPoints": null,
			"description": "* For Enrollment Managers\n* Who want to enroll sellers into a Cash program\n* this feature integrates SFDC with Tradeshift Cash platform\n* so that the enrollment managers have the latest seller data available to them in Tradeshift\n\n*Additional Details:*\n\n* Applies to sellers in closed configure status\n* Store supplier profile data in IEP\n* Read KYC/Legal docs (PDFs) from SFDC\n* Auto-populate buyers in enrollment record\n\n*Background:*\n\nSalesforce is the tool sales is using to track and store all the customer information. As it stands now Ops has to manually re-enter this into TS. This is slow and error prone. Once the supplier moves into a finished state, the information should automatically flow into Tradeshift.",
			"epicId": "",
			"key": "EN-34",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "In Progress",
			"title": "Receive Seller data from SFDC to Tradeshift",
			"type": "Epic"
		},
		{
			"id": "aeed08fe-3d9a-4265-835a-4c58cdeec6a7",
			"acceptanceCriteria": "",
			"created": 1580198640000,
			"currentPoints": null,
			"description": "* For Seller Users\n* Who have received a Cash offer\n* The Complete Enrollment Process\n* Is a functionality\n* That lets them complete all the necessary steps to participate in the cash program\n\n*Additional information*\n\n* Steps in the flow\n** -View Program Details- (post v1)\n** Review and complete company info, select participating buyers\n** Provide documentation, KYC, legal info etc.\n** Review/download enrollment letter & Accept Terms & conditions and submit for review\n* Supplier data needs to be read in from supplier profile\n* Input data and updated data to be saved to supplier profile\n* Information on step 3 feeding into the NOA\n* Documentation upload also saved to supplier profile\n* Data lake pull of invoice history\n* Data lake pull of invoice spot checks with each buyer\n* Ability to extract steps 3-6 into a supplier profile and send to Raistone automatically when whole process is complete\n* Tracking of which user is completing each step\n** intercom?\n\n*Open Questions*\n\n# Do we need a status change on SFDC (in review)\n# Do we need a status change on product \"Ready for review\"?",
			"epicId": "",
			"key": "EN-50",
			"originalPoints": null,
			"reporter": "pat",
			"status": "In Progress",
			"title": "seller enrollment wizard",
			"type": "Epic"
		},
		{
			"id": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"acceptanceCriteria": "",
			"created": 1578623280000,
			"currentPoints": null,
			"description": "* For Seller Users\n* Who are contracting to a Cash program\n* The Seller completing NOA process with TS help\n* Is a a feature\n* That lets TS automate the creation of NOA document, emails seller a copy, and tracks when Sellers have fwded it to the relevant buyers",
			"epicId": "",
			"key": "EN-15",
			"originalPoints": null,
			"reporter": "pat",
			"status": "In Progress",
			"title": "Functionality for TS to facilitate the NOA process",
			"type": "Epic"
		},
		{
			"id": "792cffa5-182e-42be-9214-7407f3e5803d",
			"acceptanceCriteria": "",
			"created": 1591173060000,
			"currentPoints": null,
			"description": "Appcues is the 3rd party tool we are using to run in-product promotions, campaigns, and surveys. As part of this Appcues pilot we are evaluating it’s utility in enabling us to run these campaigns quickly with minimal engineering bandwidth.",
			"epicId": "",
			"key": "EN-371",
			"originalPoints": null,
			"reporter": "pat",
			"status": "In Progress",
			"title": "Run campaigns using appcues to target sellers on the network",
			"type": "Epic"
		},
		{
			"id": "95cfbd07-2c6d-4760-84ee-06b757072b9a",
			"acceptanceCriteria": "",
			"created": 1591864680000,
			"currentPoints": 3,
			"description": "See notes from tech sync.",
			"epicId": "8fa28cd0-1f2d-46d2-9d61-1ed1978c656b",
			"key": "EN-385",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Write document about seller cash data profile for tech sync",
			"type": "Story"
		},
		{
			"id": "8fa28cd0-1f2d-46d2-9d61-1ed1978c656b",
			"acceptanceCriteria": "",
			"created": 1591149900000,
			"currentPoints": null,
			"description": "Background: Cash data profiles are separate from the Supplier Data profiles in Tradeshift. At some point we will have to reconcile this, but until we have consensus as to how we want to do that the data related to Cash will be separate from the supplier profile data.\n\nThese are the stories that are related to how we collect and store that data.",
			"epicId": "",
			"key": "EN-366",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "Open",
			"title": "Collection and storage of seller data related to cash",
			"type": "Epic"
		},
		{
			"id": "f5fd0ac7-8fca-4921-840a-e7574e195033",
			"acceptanceCriteria": "",
			"created": 1591864200000,
			"currentPoints": 3,
			"description": "* When targeting sellers with an Appcues campaign\n* I want to be able to create a campaign\n* That shows up on the Create Documets app ",
			"epicId": "792cffa5-182e-42be-9214-7407f3e5803d",
			"key": "EN-384",
			"originalPoints": 3,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Show Appcues flows on Create Documents",
			"type": "Story"
		},
		{
			"id": "08db340e-26d5-4359-b22a-7a8b10ed137a",
			"acceptanceCriteria": "",
			"created": 1591173660000,
			"currentPoints": 3,
			"description": "When targeting sellers with an Appcues campaign\nI want to be able to create a segment\nthat lets me specify which of these buyers is this seller connected to: NHS, DHL, Morrison, Unilever",
			"epicId": "792cffa5-182e-42be-9214-7407f3e5803d",
			"key": "EN-374",
			"originalPoints": 3,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Target sellers by buyer connection",
			"type": "Story"
		},
		{
			"id": "bc8b6385-9e6b-4291-ac70-00729f9a196e",
			"acceptanceCriteria": "- I should be able to specify a currency & amount for segmenting by Average invoice size",
			"created": 1591173540000,
			"currentPoints": 2,
			"description": "When targeting sellers with an Appcues campaign\nI want to be able to create a segment\nthat lets me specify what is a seller's Average Invoice Size in the last 12 months\n",
			"epicId": "792cffa5-182e-42be-9214-7407f3e5803d",
			"key": "EN-373",
			"originalPoints": 2,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Segment sellers by average invoice size",
			"type": "Story"
		},
		{
			"id": "4fcd51cd-9bb8-4669-abd5-86e32e6c287f",
			"acceptanceCriteria": "- I should be able to specify a currency & amount for segmenting by invoice volume",
			"created": 1591173540000,
			"currentPoints": 2,
			"description": "When targeting sellers with an appcues campaign\nI want to be able to create a segment\nthat lets me specify what is a sellers invoice volume in the last 12 months\n\n",
			"epicId": "792cffa5-182e-42be-9214-7407f3e5803d",
			"key": "EN-372",
			"originalPoints": 2,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Segment sellers by invoice volume",
			"type": "Story"
		},
		{
			"id": "bbbd3f8f-d658-4ed3-b807-226944559995",
			"acceptanceCriteria": "",
			"created": 1591863420000,
			"currentPoints": 3,
			"description": "",
			"epicId": "792cffa5-182e-42be-9214-7407f3e5803d",
			"key": "EN-383",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Use Appcues.user() to not always calculate metrics",
			"type": "Story"
		},
		{
			"id": "5a6b539e-bfbd-490d-962e-444c9dccbb81",
			"acceptanceCriteria": "",
			"created": 1591862760000,
			"currentPoints": 3,
			"description": "As a developer, I want to understand how we can automate an NoA download so we can complete the technical proposal and ensure development efforts will satisfy requirements.",
			"epicId": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"key": "EN-382",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Document how NoA download will be implemented",
			"type": "Story"
		},
		{
			"id": "eb91af8f-d3c1-41af-b03d-3c19f373a9d8",
			"acceptanceCriteria": "Once the supplier finishes the enrollment flow (enrollment reaches status COMPLETED)\n\nThe supplier receives an email with the NOA template auto-filled with the specific information for the supplier\n\nShould be in a format that allows them to just forward it to the buyer.",
			"created": 1585812600000,
			"currentPoints": 2,
			"description": "As a supplier, I want to receive an email with the NOA attachment, once I finish the enrollment flow.\n\n\n\nEmail Subject: \\[Tradeshift] Notice of Assignment\n\n\"Dear \\[Supplier Company Name],\n\nTo begin sending you early payments through Tradeshift Cash, you will need to send the attached Notice of Assignment to your buyer so that your invoices can be financed. Please add [FinOps@Tradeshift.com|mailto:FinOps@Tradeshift.com] to the BCC line of your email to the buyer, and remember to attach the Notice of Assignment. Once the bank account change is confirmed, we will initiate early payments.\"",
			"epicId": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"key": "EN-160",
			"originalPoints": 2,
			"reporter": "vga",
			"status": "In Progress",
			"title": "Send email with NOA to seller when enrollment flow is finished",
			"type": "Story"
		},
		{
			"id": "453b83da-6703-4bf5-89bb-0d16693f9146",
			"acceptanceCriteria": "",
			"created": 1591862520000,
			"currentPoints": null,
			"description": "IEP contains endpoints which aggregate/filter resources for client views. These and new similar endpoints should be moved to or created in a node layer. IEP APIs are listed here: https://docs.google.com/spreadsheets/d/1RUf_8tIE-PRqQlLeYO3nb1qnH-5izGy5vRIci1Nh1Iw/edit#gid=0. These endpoints should be available to common feature components which may be imported into different v4 apps. This should be implemented as a new service which can be accessed by the different Cash v4 apps.\n\nThis story is to have a basic Cash node layer service deployed in prod which has a single rest endpoint (health).",
			"epicId": "",
			"key": "EN-381",
			"originalPoints": null,
			"reporter": "jim",
			"status": "TO DO",
			"title": "Basic Cash Node server deployed to prod",
			"type": "Story"
		},
		{
			"id": "7e9846c5-d96f-4042-8d75-e469e56988c4",
			"acceptanceCriteria": "",
			"created": 1582366440000,
			"currentPoints": 3,
			"description": "As a developer, I want to understand why Sentry does not have more errors so we can surface more errors and fix them before our customers see them.\n\nAcceptance criteria:\n* Understand what errors are currently sent to Sentry\n* Understand what errors are not currently sent to Sentry\n* Create new pattern for how we can update the codebase so more errors are sent to Sentry",
			"epicId": "",
			"key": "EN-103",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Figure out why more errors are not in Sentry",
			"type": "Story"
		},
		{
			"id": "7f14268c-a1e3-468a-a61b-11311437d405",
			"acceptanceCriteria": "- All the fields are present in Salesforce Opportunity event message to create an enrollment.\n- The fields are documented and reviewed by Michael/ Nadina / Team.\n- Add a way to verify the event message with an example.",
			"created": 1591449060000,
			"currentPoints": null,
			"description": "Currently, only a few fields are present in Salesforce Opportunity event which is Published via a Salesforce Platform event. We need to coordinate with [~accountid:5d570ecba1f3290c16e66ea5] and [~accountid:5c64aadf82b1b638507f2933]  to get all the fields present in the platform event message which are required to create an enrollment record in IEP. Please Refer and update the Data field mapping section of the document: [https://docs.google.com/document/d/1XR-_D3dgHmOuv9ma0MaqPnLHATDAmx2bGnV7lkxzuQg/edit?usp=sharing|https://docs.google.com/document/d/1XR-_D3dgHmOuv9ma0MaqPnLHATDAmx2bGnV7lkxzuQg/edit?usp=sharing|smart-link]",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-378",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Create and map Salesforce data to IEP enrollment data",
			"type": "Story"
		},
		{
			"id": "54278d10-3690-4dcf-b44a-86b914b6ef26",
			"acceptanceCriteria": "-When an Opportunity in Salesforce is moved to closed and configured, the opportunity data is written to the Sandbox IEP Audit logs.\n-When an Opportunity in Salesforce is moved to closed and configured, the opportunity data is written as a Journal Event.",
			"created": 1589524800000,
			"currentPoints": 5,
			"description": "Using the EMPConnector client used to subscribe to the events published by Salesforce, consume the event message and audit log the opportunity data when the event is received.\n\nSample PR to import the EMPConnector library in IEP :  [https://github.com/Tradeshift/tradeshift-early-payments/pull/1579|https://github.com/Tradeshift/tradeshift-early-payments/pull/1579|smart-link]\n\nFor reference: [https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/code_sample_java_add_source_oauth.htm|https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/code_sample_java_add_source_oauth.htm]",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-312",
			"originalPoints": 5,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Connect and log salesforce opportunity data event using EMPConnector client",
			"type": "Story"
		},
		{
			"id": "2834f498-a95b-4b67-ace2-aa7fc62e0c7c",
			"acceptanceCriteria": "In EPOperations:\n - We should have an enrollment tab that will display a list of enrollments.",
			"created": 1590110820000,
			"currentPoints": 5,
			"description": "Create the enrollment tab in the EPOperations app. Clicking on the enrollment tab should display a list of enrollments, much like the enrollment tab in the EPAdmin app.",
			"epicId": "",
			"key": "EN-330",
			"originalPoints": 5,
			"reporter": "jesus.montano",
			"status": "TO DO",
			"title": "Create Enrollments tab in EPOperations",
			"type": "Story"
		},
		{
			"id": "0ce7f9ef-c7bd-482e-8223-fa79458e14d2",
			"acceptanceCriteria": "- Finishing the enrollment sets the enrollment to TRADESHIFT_REVIEW\n- Operations approving the review sets the enrollment to CREDIT_REVIEW\n- Funder approving sets to FUNDER_APPROVED\n- NOA being sent to the supplier sets to NOA\n- Once the funder or tradeshift approves, set to COMPLETED\n- APIs to move these along",
			"created": 1589349120000,
			"currentPoints": 5,
			"description": "The states to add are:\n\n* TRADESHIFT_REVIEW\n* CREDIT_REVIEW\n* FUNDER_APPROVED\n* NOA",
			"epicId": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"key": "EN-306",
			"originalPoints": 5,
			"reporter": "vga",
			"status": "TO DO",
			"title": "HOLD (Requirements may change) - Add new states to RF enrollment",
			"type": "Story"
		},
		{
			"id": "50e1f7ea-4204-4a95-8ed3-c4707e785f15",
			"acceptanceCriteria": "Process Builder is updated to trigger Opportunities correctly",
			"created": 1588388280000,
			"currentPoints": null,
			"description": "We need to have an agreement with the Tradeshift Salesforce CRM about what will determine an Opportunity that includes a Cash Early Payments product to be enrolled, so that the correct Opportunities are sent to IEP.\n\nWe should work with [~accountid:5abe920ee56ac41fbdc2df97] to achieve this.",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-288",
			"originalPoints": null,
			"reporter": "jim",
			"status": "TO DO",
			"title": "Work with Tradeshift Salesforce CRM to agree what should be used to recognize an Opportunity that includes a Cash Early Payments product for Seller enrollment in IEP",
			"type": "Task"
		},
		{
			"id": "2051123f-f104-462b-97ce-97d2c3bbba2b",
			"acceptanceCriteria": "- Monitoring alerts works and chart displays correct data",
			"created": 1591279920000,
			"currentPoints": null,
			"description": "Create SPLUNK Dashboard with following monitoring metrics to track Salesforce Enrollment integration monitoring: \n\n# Salesforce Health Endpoint (Trigger Email alert if Down)\n# Record failed event processing while transformation logs with message and reason (Chart with Daily Email with Report)\n# Record API failures from - to salesforce (Chart with Daily email report with opportunity details)\n# Record successfully processed chart for enrollments. (Chart)",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-377",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Create SPLUNK Dashboard for salesforce enrollment integration monitoring",
			"type": "Story"
		},
		{
			"id": "c553efd9-b91b-461f-89d1-3a6c3929802d",
			"acceptanceCriteria": "- Add Opportunity ID ( opportunity_id new field) in onboardings table\n- A READY Program and a DRAFT Enrollment is created for RF Product with correct fields if new seller and buyer combination is sent from salesforce\n- A READY Program is used if the program related to the opportunity event already exists\n- A DRAFT Enrollment is updated if the Program already exists and the DRAFT enrollment is already present with that opportunity id.",
			"created": 1591277640000,
			"currentPoints": null,
			"description": "Salesforce opportunity event contains all the data a program and an enrollment creation needs. Using the data from this event, create a READY Program using the already created subscription and then use that program to create a DRAFT enrollment with all the data except the enrollment documents.\n\nRefer the Cash Salesforce integration document for the mapped fields for more info: [https://docs.google.com/document/d/1XR-_D3dgHmOuv9ma0MaqPnLHATDAmx2bGnV7lkxzuQg/edit?usp=sharing|https://docs.google.com/document/d/1XR-_D3dgHmOuv9ma0MaqPnLHATDAmx2bGnV7lkxzuQg/edit?usp=sharing|smart-link]",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-376",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Create a DRAFT enrollment from Salesforce opportunity for RF",
			"type": "Story"
		},
		{
			"id": "836e5275-1927-4cba-951f-1438067a993e",
			"acceptanceCriteria": "-If the seller is moved to closed configured, we should send an alert notification to ops.\n-If the Salesforce publish is unsuccessful, send an alert notification to ops.",
			"created": 1577153220000,
			"currentPoints": null,
			"description": "Given that a supplier is in closed configured state in salesforce\nWhen Salesforce pushes the supplier enrollment data to IEP Backend (Tradeshift Cash), an automatic email alert should be generated for the Ops to enroll the supplier manually (if at all needed). This alert could be added in the flow builder of Salesforce.",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-43",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Trigger salesforce notification emails when seller goes to Closed Configured",
			"type": "Story"
		},
		{
			"id": "5d7b3de3-f1c6-4161-a1fc-7ef4b76bc18e",
			"acceptanceCriteria": "- PDFs that are pulled from salesforce automatically flow into enrollment\n\n- EPManager/EPAdmin able to view enrollment documents attached for Salesforce generated enrollments",
			"created": 1577152380000,
			"currentPoints": null,
			"description": "As a program manager when I open enrollment for a seller the PDFs (Enrollment documents) of their enrollment letter and bank account statement should auto-populate\n\nGiven that we have collected the information from salesforce \nWhen the program manager types in a suppliers name\nThen the PDFs of their enrollment letter and bank account info should auto-populate from their IEP profile.",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-42",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "EPManager/EPAdmin able to view documents attached for Salesforce generated enrollments",
			"type": "Story"
		},
		{
			"id": "3b772950-c8d3-463d-8758-4a8be31ee15e",
			"acceptanceCriteria": "Send interpreted membership status in the onboardings api call",
			"created": 1588645140000,
			"currentPoints": null,
			"description": "The status column in the onboarding list view in EPManager needs to show a combination of membership and enrollment status.\n\nThe logic for the status display is:\n\n* If zero memberships, then show uninterpreted enrollment status\n* If multiple memberships and one is active, then show uninterpreted active enrollment status\n* If one or multiple memberships and all are expired, then show expired\n\nProposed changes\nWhen calling the onboarings api, query the program_membership table and implement point #3, from the above display logic, to create an interpreted (active / expired) membership status.",
			"epicId": "",
			"key": "EN-294",
			"originalPoints": null,
			"reporter": "josh.spotswood",
			"status": "TO DO",
			"title": "Add membership status to enrollment api",
			"type": "Story"
		},
		{
			"id": "0bfc1c3f-236c-4c7d-a888-c4de90741d86",
			"acceptanceCriteria": "",
			"created": 1583398080000,
			"currentPoints": 1,
			"description": "Background: Plaid can provide us with bank account balances which could help underwriting and timing of when a supplier needs working capital.\n\nUser Value: Instead of having to produce audited financials which I may or may not even have as a supplier I can enble Tradeshift to automatically underwrite my credit via Plaid. \n\nWhen the user inputs their bank account information\nBackend will access Plaid\nAnd return bank account balances\n\nNeed to create endpoints for the Plaid API to do this\n\n[https://plaid.com/docs/#balance|https://plaid.com/docs/#balance]\n\nAcceptance Criteria\n\n* Create endpoint to draw out bank account balances daily for last 2 years\n* -Save these in IEP and attach to supplier profile-\n\n",
			"epicId": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"key": "EN-128",
			"originalPoints": 1,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "End points for Balances",
			"type": "Story"
		},
		{
			"id": "6166ce9c-b9d5-4b21-8a70-086cfa38fe46",
			"acceptanceCriteria": "",
			"created": 1583398320000,
			"currentPoints": 1,
			"description": "When the user inputs their bank account information\nBackend will access Plaid\nAnd return transaction history\n\nNeed to create endpoints for the Plaid API to do this\n\n[https://plaid.com/docs/#transactions|https://plaid.com/docs/#transactions]\n\nAcceptance Criteria\n\n* Create endpoint to consume the transaction history\n** Amount\n** Debit or credit\n** Account (making or receiving the payment)\n** Date\n* +-Save these in IEP and attach to supplier profile-+\n\n",
			"epicId": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"key": "EN-127",
			"originalPoints": 1,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "End points for transactions",
			"type": "Story"
		},
		{
			"id": "f6e824fd-dd66-4a3a-9cd2-f68dc8b4acbe",
			"acceptanceCriteria": "",
			"created": 1583398020000,
			"currentPoints": 1,
			"description": "Background: Plaid provides endpoints for bank account numbers. This will allow us to pull relevant info for the payment routing.\n\nUser Value: As a user I can just provide Tradeshift my bank account log in rather than locate all of the bank account numbers myself.\n\nWhen the user inputs their bank account information\nBackend will access Plaid\nAnd return bank account and routing numbers\n\nNeed to create endpoints for the Plaid API to do this\n\n[https://plaid.com/docs/#auth|https://plaid.com/docs/#auth]\n\nAcceptance Criteria\n\n* Checking bank account number\n* Checking routing number\n* Savings bank account number\n* Savings routing number\n\nUnsure if there will be a savings account as these are business accounts\n\n* *No Data Storage\\!\\!\\!*\n\n\n\n",
			"epicId": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"key": "EN-126",
			"originalPoints": 1,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "End points for Authentication Feature",
			"type": "Story"
		},
		{
			"id": "135c3615-d4f0-489a-8e13-a8f7cc4105b3",
			"acceptanceCriteria": "",
			"created": 1583398620000,
			"currentPoints": 2,
			"description": "Background: Plaid provides endpoints for bank account ID information. This will allow us to pull   relevant KYC info for the business.\n\nUser Value: As a user I can just provide Tradeshift my bank account log in rather than locate all of the KYC info myself.\n\nWhen the user inputs their bank account information\nBackend will access Plaid\nAnd return identity information\n\nNeed to create endpoints for the Plaid API to do this\n\n[https://plaid.com/docs/#identity|https://plaid.com/docs/#identity]\n\nAcceptance Criteria\n\n* Create endpoint to consume identity info\n** Name\n** Address\n** Email\n* Save these in IEP and attach to supplier profile\n\n\n\n",
			"epicId": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"key": "EN-125",
			"originalPoints": 2,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "End points for ID",
			"type": "Story"
		},
		{
			"id": "0931fa50-f039-41e9-960e-acb7acaa73e5",
			"acceptanceCriteria": "",
			"created": 1588907580000,
			"currentPoints": null,
			"description": "Once the supplier has been set up through bulk upload they would get an automated email response saying that they are ready to get early payments.\n\nUnsure if this would already happen given our email service w HSBC.",
			"epicId": "a7b32e31-3b36-4607-abc5-529d0642435e",
			"key": "EN-358",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Email notification to supplier they are up and running - DRAFT",
			"type": "Story"
		},
		{
			"id": "546c4ee1-3d6b-41d2-82bc-a0453b173d24",
			"acceptanceCriteria": "Map the CSV to the enrollment record\n\nCreate enrollment for each supplier\n\nMake the name associated with the upload the admin on the account\n\nMake the supplier active",
			"created": 1588907460000,
			"currentPoints": null,
			"description": "Background: Specific for the HSBC deal with Schaeffler, but will be relevant for other deals with numerous suppliers. This feature will allow an Ops or Support user (eventually also bank or buyer user) to upload a CSV with multiple suppliers and have that create an enrollment and membership for them. This will sit in the Ops App.\n\nWhen the supplier’s are uploaded into the system, this should create a supplier enrollment record and membership. We will only be getting files with suppliers that are fully ready to go (KYCed, onboarded to bank, bank account has been changed by the buyer), so when it is uploaded the supplier is ready to start.",
			"epicId": "a7b32e31-3b36-4607-abc5-529d0642435e",
			"key": "EN-355",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Bulk upload creates enrollment",
			"type": "Story"
		},
		{
			"id": "269f819e-a4f2-4653-9a4d-b3c05c686acd",
			"acceptanceCriteria": "",
			"created": 1585896840000,
			"currentPoints": null,
			"description": "Background: Since there is a different NOA for each buyer, the sample NOA needs to be stored at a program level. This will be done in EPAdmin.\n\nAcceptance Criteria:\n\n* Program manager can upload buyer NOA template\n* This uploaded template drives the NOA that is able to be downloaded by a supplier on that program",
			"epicId": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"key": "EN-167",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Upload NOA template into EPAdmin",
			"type": "Story"
		},
		{
			"id": "4cb9e8d4-5020-41f1-bfb2-ccdb0b2e9b17",
			"acceptanceCriteria": "",
			"created": 1585813080000,
			"currentPoints": null,
			"description": "As a supplier when an NOA is sent to my buyer and I CC the tradeshift operations account, it is tracked that the supplier has sent the NOA.\n\nAcceptance Criteria:\n\n* When the NOA email goes to [FinOps@tradeshift.com|mailto:FinOps@tradeshift.com], this is recorded\n* Using the email domain, we match that email address to the company and use that to record them as having submitted the NOA\n* Date of this submission is also tracked",
			"epicId": "c52812e4-9dd0-45dc-8a0d-88e02b17e079",
			"key": "EN-162",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Email NOA and cc TS email for confirmation",
			"type": "Story"
		},
		{
			"id": "ff23f91c-c648-485a-9fb3-380b4360eb7e",
			"acceptanceCriteria": "",
			"created": 1591150020000,
			"currentPoints": null,
			"description": "",
			"epicId": "8fa28cd0-1f2d-46d2-9d61-1ed1978c656b",
			"key": "EN-368",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "DRAFT - Replace the Address fields with Google Maps API",
			"type": "Story"
		},
		{
			"id": "8aae8a5d-86da-460a-8ba1-b0f39496141d",
			"acceptanceCriteria": "",
			"created": 1588907280000,
			"currentPoints": null,
			"description": "When the user uploads their file, they should get some indication of the success/failure of it.\n\nAcceptance Criteria:\n\n* If no issues - Message saying “All XX suppliers successfully enrolled”\n* If some issues line level validation on which suppliers were problematic\n* If file type is wrong “Error, incorrect file type”",
			"epicId": "a7b32e31-3b36-4607-abc5-529d0642435e",
			"key": "EN-357",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Validation Checks and Error Messaging in Bulk Upload",
			"type": "Story"
		},
		{
			"id": "3273b0ae-acdc-4778-b628-41ac2dc7a34d",
			"acceptanceCriteria": "",
			"created": 1588906920000,
			"currentPoints": null,
			"description": "The bulk upload feature will sit in the operations dashboard. A operations or support user can access it. \n\nAcceptance Criteria:\n\n* Tab that says “Bulk Supplier Upload”\n* Ability to upload a CSV with text saying Upload Supplier Data Set",
			"epicId": "a7b32e31-3b36-4607-abc5-529d0642435e",
			"key": "EN-356",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Bulk upload screen in ops dashboard",
			"type": "Story"
		},
		{
			"id": "a7b32e31-3b36-4607-abc5-529d0642435e",
			"acceptanceCriteria": "",
			"created": 1588906920000,
			"currentPoints": null,
			"description": "Background: Specific for the HSBC deal with Schaeffler, but will be relevant for other deals with numerous suppliers. This feature will allow an Ops or Support user (eventually also bank or buyer user) to upload a CSV with multiple suppliers and have that create an enrollment and membership for them. This will sit in the Ops App.\n\nAcceptance Criteria:\n\n* Screen in the Ops App that allows for this\n* Validation on the file upload\n* Error reporting in the UI\n* If all the fields are met will create an active enrollment, ready to be financed for the suppplier",
			"epicId": "",
			"key": "EN-334",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "Open",
			"title": "[De-prioritized] Bulk Upload/enrollment in Ops Dashboard",
			"type": "Epic"
		},
		{
			"id": "0dd4eedd-5fd6-4a21-9a3d-66851dedfa68",
			"acceptanceCriteria": "",
			"created": 1591149960000,
			"currentPoints": null,
			"description": "Background: Google Maps API could be an easier and more accurate way to collect address information for suppliers. This spike is to investigate the google maps API and see how we could incorporate it into the address field.\n\nAC:\nSpend 1/2-1 day looking at the API\nCome back with recs about how we can use this instead of our current address collection process",
			"epicId": "8fa28cd0-1f2d-46d2-9d61-1ed1978c656b",
			"key": "EN-367",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "SPIKE - Investigate Google Maps API",
			"type": "Story"
		},
		{
			"id": "ec827f43-f7c1-4341-9a41-42021acb1ad3",
			"acceptanceCriteria": "",
			"created": 1590826500000,
			"currentPoints": null,
			"description": "If your project has a large number of tests, it can take a long time for tests to complete running serially on one machine. Running tests in parallel across many virtual machines can save your team time and money when running tests in Continuous Integration (CI).\n\nCypress can run recorded tests in parallel across multiple machines since version 3.1.0. While parallel tests can also technically run on a single machine, we do not recommend it since this machine would require significant resources to run your tests efficiently.\n\nhttps://docs.cypress.io/guides/guides/parallelization.html#Overview",
			"epicId": "",
			"key": "EN-359",
			"originalPoints": null,
			"reporter": "jim",
			"status": "TO DO",
			"title": "Parallelize Cypress tests",
			"type": "Task"
		},
		{
			"id": "9f99b6d8-be87-480b-992d-a9240bab544f",
			"acceptanceCriteria": "",
			"created": 1586322360000,
			"currentPoints": 3,
			"description": "Tech debt : Refactor test DDAssetLimitAccessTest. It currently uses spring boot integration test.Kindly refactor this test. Reference document : https://docs.google.com/spreadsheets/d/1wl3LRCphSrhYqypxNgVXF0ke-qkhouSnYAPffuWke3I/edit#gid=328722344",
			"epicId": "",
			"key": "EN-187",
			"originalPoints": 3,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Tech debt : Refactor test DDAssetLimitAccessTest",
			"type": "Story"
		},
		{
			"id": "6aa68207-4ba2-4bb7-a38d-5e58fb02c392",
			"acceptanceCriteria": "- Add API spec for enrollment creation and modification API\n- Add API spec for membership creation and modification API\n- Added dependent API specs to complete above",
			"created": 1589963820000,
			"currentPoints": null,
			"description": "Currently, the open API spec does not provide any detail regarding enrollment or membership creation or update API’s and the specs related to it. We would need to add these open API spec to be consistent with our API’s so that frontend developers can use it as a reference to any API changes. This is also required to help with the component testing which is EN-319.",
			"epicId": "6fccf660-8236-4783-b708-e1d72f7b78af",
			"key": "EN-320",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Update and create API documentation specs for enrollment",
			"type": "Story"
		},
		{
			"id": "48df24cd-f848-47c6-93a7-92ddb8531bfe",
			"acceptanceCriteria": "- A component test is added for enrollment creation (any provider which is active in PROD)\n- Enrollment email sent is verified as well\n- App activation is verified",
			"created": 1589961840000,
			"currentPoints": null,
			"description": "Enrollment creation is an important and a critical part of the IEP lifecycle. We should add a component test for the whole process of enrollment creation. This would also involve adding mock classes for black box testing of the API and changing or adding API definitions. NOTE: This needs to be done in parallel or after EN-320. This can be done as part of acceptance test, just for reference an example: AssetLimitAcceptanceITCase.java",
			"epicId": "6fccf660-8236-4783-b708-e1d72f7b78af",
			"key": "EN-319",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Add a component test for enrollment creation",
			"type": "Story"
		},
		{
			"id": "87539db8-1e82-4faf-b452-777b99f3c1e1",
			"acceptanceCriteria": "",
			"created": 1582601700000,
			"currentPoints": 2,
			"description": "As the development team, we want to to track metrics that are meaningful towards making an impact on our business and technical goals.\n\nAcceptance criteria:\n* Define questions and metrics for each of the selected goals\n* Write plans for how we will implement the metrics (list for a single story, multiple stories, etc)\n\nBackground: Nick wants us to create gqm goals based on dharma goals. Just make a list of goals, do 15, then prioritize to pick like three then do quality and metrics. Do both business and technical goals.\n\nPresentation: https://docs.google.com/presentation/d/1nUVdFcB2_PIGrfw5UfW-RoynQIMbWB7el0xghOZsDS4/edit#slide=id.p4",
			"epicId": "addccca5-fffe-4c1b-b20b-73904164dc3f",
			"key": "EN-107",
			"originalPoints": 2,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Create questions and metrics for GQM",
			"type": "Story"
		},
		{
			"id": "1019cf17-b5e9-4131-99cc-b3b7156118e2",
			"acceptanceCriteria": "- a `supplierChargeRate` column exists that is combination of spread rate and network rate in SCF, `rate` in DD, and `sellerFlatRate` in RF.\n- Updating the `supplierChargeRate` should update `rate` in DD\n- Updating the `supplierChargeRate` should update `sellerFlatRate` in RF\n- Updating the `supplierChargeRate` in SCF should update related fields (network spread rate, provider spread rate, etc.)",
			"created": 1588907100000,
			"currentPoints": 8,
			"description": "SCF - Interest rates is the sum of provider spread rate and network spread rate\n\nDD - Interest rate is represented by the {{rate}}column\n\nRF - Interest rate is represented by the {{sellerFlatRate}} column\n\nThe concept is the same but the interest rates are represented by 3 different rates in 3 different products. They should be consistent so that whichever component outside of membership (UI, other services) is interested in the interest rate, would go to one single field to do that.\n\nThis is also important from the modularization point of view because you would not the logic of product specific rate columns to creep outside of membership, especially if you are sending a change event in case of a microservice.",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-301",
			"originalPoints": 8,
			"reporter": "abs",
			"status": "TO DO",
			"title": "Interest rates fields need to be consistent",
			"type": "Story"
		},
		{
			"id": "6fccf660-8236-4783-b708-e1d72f7b78af",
			"acceptanceCriteria": "",
			"created": 1589960940000,
			"currentPoints": null,
			"description": "Currently, for local development, we are heavily dependent on cloud stacks for e2e testing. As part of the company-wide efforts to move away from using cloud stack, we need to get ready to move away from it and use a earlypayments mock environment instead. This epic encapsulates all the stories necessary to start using a mock environment for the enrollment team.",
			"epicId": "",
			"key": "EN-316",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "In Progress",
			"title": "Cash enrollment wiremocks",
			"type": "Epic"
		},
		{
			"id": "addccca5-fffe-4c1b-b20b-73904164dc3f",
			"acceptanceCriteria": "",
			"created": 1582601880000,
			"currentPoints": null,
			"description": "As the development team, we want to to track metrics that are meaningful towards making an impact on our business and technical goals.\n\nBackground: Nick wants us to create gqm goals based on dharma goals. Just make a list of goals, do 15, then prioritize to pick like three then do quality and metrics. Do both business and technical goals.\n\nPresentation: https://docs.google.com/presentation/d/1nUVdFcB2_PIGrfw5UfW-RoynQIMbWB7el0xghOZsDS4/edit#slide=id.p4",
			"epicId": "",
			"key": "EN-109",
			"originalPoints": null,
			"reporter": "tst",
			"status": "In Progress",
			"title": "Define GQM",
			"type": "Epic"
		},
		{
			"id": "80529bd7-dedb-4657-b9a1-b9286f1200fa",
			"acceptanceCriteria": "",
			"created": 1577161740000,
			"currentPoints": null,
			"description": "We need an API to be able to consume information out of the data lake.\n\nInformation:\n* Supplier transactional history\n* Spot check invoices for each buyer",
			"epicId": "",
			"key": "EN-44",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Draw invoice info out of capsian",
			"type": "Story"
		},
		{
			"id": "6bae4ec9-20d0-4ea1-a6d6-b858b9577d0b",
			"acceptanceCriteria": "",
			"created": 1585917120000,
			"currentPoints": null,
			"description": "The server-side code for the new enrollment process has scaffolding in place to show the old enrollment flow on production and the new one in sandbox and testing environments. This scaffolding should be taken out. This includes the handlers and the provider configurator, which swaps the case configurator.",
			"epicId": "",
			"key": "EN-171",
			"originalPoints": null,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "Remove scaffolding from new enrollment flow",
			"type": "Story"
		},
		{
			"id": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"acceptanceCriteria": "",
			"created": 1583374260000,
			"currentPoints": null,
			"description": "We need to build endpoints to interact with Plaid’s API.",
			"epicId": "",
			"key": "EN-123",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "Open",
			"title": "Construction of endpoints for a Plaid API integration",
			"type": "Epic"
		},
		{
			"id": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"acceptanceCriteria": "",
			"created": 1581409140000,
			"currentPoints": null,
			"description": "* For the Enrollment Managers\n* Who manage enrollment of sellers in Cash programs\n* New sellers view\n* Is a feature\n* That lets them view all the Sellers that are either eligible or have been invited to participate in a cash program\n\nDesign (Direction)\n\n!image-20200331-230527.png|width=1701,height=1064!\n\n!image-20200331-230533.png|width=1701,height=1063!\n\n\n\nTo be added as stories under this epic:\n\n* [https://tradeshift.aha.io/features/PETM127-53|https://tradeshift.aha.io/features/PETM127-53]\n* [https://tradeshift.aha.io/features/PETM127-15|https://tradeshift.aha.io/features/PETM127-15]\n* [https://tradeshift.aha.io/features/PETM127-16|https://tradeshift.aha.io/features/PETM127-15]",
			"epicId": "",
			"key": "EN-81",
			"originalPoints": null,
			"reporter": "pat",
			"status": "Open",
			"title": "[Draft] Sellers view for managing seller enrollment",
			"type": "Epic"
		},
		{
			"id": "8537bf6f-7214-40bd-a448-fd168b274995",
			"acceptanceCriteria": "",
			"created": 1584670320000,
			"currentPoints": null,
			"description": "* For Enrollment Managers\n* Who are responsible for enrolling sellers to Cash\n* The Enrollment at Scale Is a functionality\n* That lets them successfully enroll & activate many sellers",
			"epicId": "",
			"key": "EN-135",
			"originalPoints": null,
			"reporter": "vga",
			"status": "In Progress",
			"title": "Review & Activate Sellers",
			"type": "Epic"
		},
		{
			"id": "8927559a-f509-415e-95f8-4103bcad8703",
			"acceptanceCriteria": "- This feature should have the same feature flag as enrollment flow\n- All data provided by the seller during the in-product enrollment flow should be read only \n- Implementation matches designs (Buyer module is new and can be covered in a separate story). \n- Only editable fields are in the program Details and Notes field under seller details\n- Add the new data elements to IEP seller profile",
			"created": 1584666540000,
			"currentPoints": 5,
			"description": "* As an enrollment manager viewing a seller enrollment record\n* I want to view all the information (data+attachments) provided by the seller user during the in-product enrollment\n* So I can review the seller information & take necessary actions\n* Enrollment manager can change the status three time\n** Can move from TS Review if all the data in the sheet is good\n** Can move to Credit Review stays in this state until we get feedback from funder\n** Move to Funder Approved, this will trigger NOA action\n** When NOA is confirmed they can be Activated\n* This should be built within the EPOperations app\n\n!image-20200412-211312.png|width=802,height=1183!",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-133",
			"originalPoints": 5,
			"reporter": "vga",
			"status": "In Progress",
			"title": "In-product enrollment screen manager review",
			"type": "Story"
		},
		{
			"id": "052203b8-ce97-48fc-a3db-46755dce32dd",
			"acceptanceCriteria": "- ScbProgramAccessTest is migrated to Junit5 from spring boot test",
			"created": 1590501060000,
			"currentPoints": null,
			"description": "Refactor ScbProgramAccessTest to Junit5",
			"epicId": "",
			"key": "EN-332",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Refactor ScbProgramAccessTest to Junit5",
			"type": "Story"
		},
		{
			"id": "0e6ee6af-bf3c-4989-abc7-ea6f098a3df8",
			"acceptanceCriteria": "",
			"created": 1585897860000,
			"currentPoints": 3,
			"description": "Oh no! Due to a programming error, cases don't get moved to completed. To fix this, a developer will need to remove the AwaitingRfTermsOfService handler and instead have the CaseConfigurator go straight to Completed. Completed's promotion will write the audit record and call it a day. We don't need the code in AwaitingRfTermsOfService because there's no scenario where a user would have started an enrollment without having accepted the tradeshift terms of service (the point of having this handler in the first place). If the team wants to keep the handler around, then at the minimum the AwaitingRfTermsOfService handler should call the promote method of the completed handler instead of manually setting the status of the enrollment (`onboarding.setStatus(OnboardingStatus.COMPLETED)`)",
			"epicId": "",
			"key": "EN-168",
			"originalPoints": 3,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "Enrollment cases end up in AwaitingTermsOfService instead of Completed",
			"type": "Bug"
		},
		{
			"id": "f4dab54b-dcc9-4fa2-a4f3-7b210925d6af",
			"acceptanceCriteria": "",
			"created": 1588167780000,
			"currentPoints": null,
			"description": "As a non-developer, I want to be able to create onboardings, product tours, surveys, and announcements in product so that I can increase user engagement without involving developers.\n\nAcceptance criteria:\n* Appcues added to DocumentManager app\n* Documentation is written\n* Survey is live in production",
			"epicId": "",
			"key": "EN-284",
			"originalPoints": null,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Add Appcues to product",
			"type": "Story"
		},
		{
			"id": "7a72608d-747a-428c-bfd3-7c7cd245c54c",
			"acceptanceCriteria": "",
			"created": 1583799720000,
			"currentPoints": 2,
			"description": "As a developer, I should be able to access Plaid’s sandbox/developer environment to test all Plaid implementations. \n\nAll documentation for Plaid can be found here -  [https://plaid.com/docs/|https://plaid.com/docs/]\n\nAcceptance Criteria -\n\n* API authentication is setup with IEP\n* Test endpoints using Postman or similar client and verify data is returned by Plaid",
			"epicId": "9eab1b94-89ab-46ac-af74-1495cb8b14c8",
			"key": "EN-124",
			"originalPoints": 2,
			"reporter": "mads.stolberglarsen",
			"status": "TO DO",
			"title": "Plaid Integration setup",
			"type": "Story"
		},
		{
			"id": "27cb7fcf-ff60-4d12-a128-a86466cb8cfe",
			"acceptanceCriteria": "",
			"created": 1589282640000,
			"currentPoints": null,
			"description": "Why do we need Component tests?\n\n* We want to test the API and validate its response\n* Every API’s response is a contract with its caller which must not be broken. If changed, it must always be backward compatible\n* It basically tests the Controller layer of the backend\n\nWhat do we have today?\n\n* We have Controller tests today but they are not consistent.\n* Some Controller tests load the full Spring context which makes the tests very slow and increases build time.\n* Some tests extend JerseyControllerTest and are pretty fast but they start a Grizzly server and can’t run in parallel\n\nWhat do we need to do?\n\n* All the Controller tests must be moved to the Component test section of the test-suite\n* It will decrease the build time significantly\n* It will enforce the contract during build time",
			"epicId": "",
			"key": "EN-305",
			"originalPoints": null,
			"reporter": "abs",
			"status": "Open",
			"title": "Component Tests",
			"type": "Epic"
		},
		{
			"id": "95d13067-bc37-41cf-a834-c3c0e1669ffb",
			"acceptanceCriteria": "\nAcceptance Criteria:\n\n1. All fields in program membership for which end date is in future or null should be editable\n2. All fields in program membership for which end date is today or past should not be editable except start and end date.",
			"created": 1588924440000,
			"currentPoints": null,
			"description": "EP Admin Program Membership should disable fields for expired membership\n\nOnly start and end date should be editable in old expired memberships from EPAdmin for inadvertently creating bad data from EPAdmin\n",
			"epicId": "",
			"key": "EN-304",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "EP Admin Program Membership should disable fields for expired membership",
			"type": "Story"
		},
		{
			"id": "84b50c02-9e70-43b3-8016-97be5a91ae65",
			"acceptanceCriteria": "",
			"created": 1588908840000,
			"currentPoints": null,
			"description": "EN-140 implemented feature that Admin can update enrollment documents. This ticket is to update IEP so old documents versions will be archived (retained) and not deleted. The UI need only show the latest however, the archive will only be used as a last resort.",
			"epicId": "",
			"key": "EN-302",
			"originalPoints": null,
			"reporter": "jim",
			"status": "TO DO",
			"title": "When enrollments documents are updated by Admin, old documents versions should be archived not deleted",
			"type": "Story"
		},
		{
			"id": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"acceptanceCriteria": "",
			"created": 1585719000000,
			"currentPoints": null,
			"description": "",
			"epicId": "",
			"key": "EN-155",
			"originalPoints": null,
			"reporter": "ngu",
			"status": "In Progress",
			"title": "Work to move the enrollment domain into its own concerns and data model",
			"type": "Epic"
		},
		{
			"id": "2b9be80e-d8f7-4e6b-96c7-f67488c15cb6",
			"acceptanceCriteria": "AC:\n\nDiagram like the above for enrollment domain as it exists today as an FSM (finite state machine), minus all exception cases, just the main states and events\n\nReview of a plan for how it will look in the future, including the changes to the FSM above, as a separate domain module(s) and data model\n\nEnsure there are no circular dependencies and we have asynchronous communication.\n\nPlan to implement this as close to code as possible - we should be able to read the machine in the code\n\nMap the new state machine to what is proposed as “status flows” from our program",
			"created": 1585719780000,
			"currentPoints": 5,
			"description": "Right now we do not have a clear definition of the events and states that will be needed in enrollment to align with our business and technical strategy. It would be a huge benefit to have these documents to talk from.\n\nWe have an example in FIS that was done to help foster communication (although it was done a bit too late to be useful enough).\n\n!Cash State Machine - Raistone.png|width=567,height=644!\n\nThis is what we need to do for the enrollment part of IEP - both what we plan to do in the future for modularization and what exists today.",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-157",
			"originalPoints": 5,
			"reporter": "ngu",
			"status": "TO DO",
			"title": "State machine definition and review for enrollment domain",
			"type": "Story"
		},
		{
			"id": "8158c02d-a7b7-4880-ba9d-d29645191b31",
			"acceptanceCriteria": "(in any order) Identify, document and peer review the refactoring required for the separation of the security model in IEP (data model and code)",
			"created": 1585719600000,
			"currentPoints": 8,
			"description": "Right now in IEP the onboarding on program objects are directly tied to the spring security model. This needs to be separated out, so that the modules are not directly tied to the security model.\n\nExample: when you add a different user, you assign an app, which is convoluted and requires explicit test cases to discover what ACL is added for a particular user\n\nThere are a different set of database tabled in IEP for storing user access restrictions.\n\nThe proposal is to move this to a separate module/place, and not be tied only to IEP.",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-156",
			"originalPoints": 8,
			"reporter": "ngu",
			"status": "TO DO",
			"title": "Identify and document a Separate security dependency in IEP",
			"type": "Story"
		},
		{
			"id": "f51804d2-0821-45f5-91ac-944035a275e0",
			"acceptanceCriteria": "",
			"created": 1588736820000,
			"currentPoints": null,
			"description": "Introduce flagr as a feature service instead of a customised feature service for cash\n\n[https://tradeshift.slack.com/archives/C6FQJ7E3T/p1587628472083500|https://tradeshift.slack.com/archives/C6FQJ7E3T/p1587628472083500]\n\nAcceptance Crtieria:\n\n* Everyone in the team understands how to use flagr\n* FlagR is used for getting new feature flags in Cash\n\n",
			"epicId": "",
			"key": "EN-297",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Introduce flagr as a feature service",
			"type": "Story"
		},
		{
			"id": "891b9b02-afca-4d75-a5a0-555346d11bea",
			"acceptanceCriteria": "Check if RD-277 is a duplicate, if not then...\n\nFor the enrollment UIs:\n- Remove the exception if possible, otherwise...\n- Ensure all exceptions are now correctly reported in sentry for the missing 4xx errors\n- Ensure all sentry issues have clear information which can be used to debug the issue",
			"created": 1588136880000,
			"currentPoints": null,
			"description": "A PR for the backend was merged that will take care of all of the 4xx false positives that we have been seeing (for all the teams). Any errors now in the backend will be MUST fix issues.\n\nFrontend - The errors are now moved from the backend to the frontend, where the user should not be allowed to have a path now that would fire this error and should be captured somehow in the frontend. The frontend needs the ability to validate these errors and improve the UX experience. \n\nThere are some errors reported in sentry that has very little context - bad request is not enough information (specifically the ones coming from the frontend)",
			"epicId": "",
			"key": "EN-283",
			"originalPoints": null,
			"reporter": "ngu",
			"status": "TO DO",
			"title": "Investigate 4xx issues in UI for enrollment domain",
			"type": "Story"
		},
		{
			"id": "f0973c7c-b727-4765-8b85-ba9adcea4341",
			"acceptanceCriteria": "PDFs types can be determined programmatically by IEP",
			"created": 1588321920000,
			"currentPoints": null,
			"description": "Current the Seller PDFs are all added to the attachments & files slot in the Opportunity. This ticket is modify the Opportunity workflow so that each PDF is stored separately or tagged in some way so that IEP will be able to know which PDF is which without user intervention.\n\nWe should work with [~accountid:5cfec89eceb3f20bc3b2bbed], [~accountid:5abe920ee56ac41fbdc2df97], [~accountid:5d570ecba1f3290c16e66ea5] or someone they recommend to achieve this.",
			"epicId": "0e6c4c56-fb6c-40c8-ae08-320e5d0c49be",
			"key": "EN-286",
			"originalPoints": null,
			"reporter": "jim",
			"status": "TO DO",
			"title": "Update Opportunity setup in Salesforce to differentiate between attachment types",
			"type": "Task"
		},
		{
			"id": "648462fc-7678-4eb3-9ab6-47b7afd47a25",
			"acceptanceCriteria": "",
			"created": 1580264460000,
			"currentPoints": null,
			"description": "As a supplier, I want to be able to continue using the existing enrollment flow until the new one has been released to prod.\n\nAcceptance criteria:\n\n* existing enrollments are not affected by new enrollment flow - still can be completed as before\n* we can ship new enrollment flow code to prod\n* there is a way to turn on the new enrollment flow at runtime so we can see how it would work in sandbox",
			"epicId": "aeed08fe-3d9a-4265-835a-4c58cdeec6a7",
			"key": "EN-58",
			"originalPoints": null,
			"reporter": "pat",
			"status": "Done",
			"title": "Feature flag for new enrollment flow",
			"type": "Story"
		},
		{
			"id": "54020bcb-0f4a-4e80-9c98-97b2ad2dbc3b",
			"acceptanceCriteria": "",
			"created": 1580440200000,
			"currentPoints": null,
			"description": "As a seller, I want to use the new enrollment flow so I have a better experience starting to use cash.\n\nAcceptance criteria:\n\n* Feature flag for new enrollment flow has been enabled in production",
			"epicId": "aeed08fe-3d9a-4265-835a-4c58cdeec6a7",
			"key": "EN-68",
			"originalPoints": null,
			"reporter": "pat",
			"status": "TO DO",
			"title": "Turn on new enrollment flow",
			"type": "Story"
		},
		{
			"id": "33fd5c6d-cdb4-430a-91f9-cccc64d37166",
			"acceptanceCriteria": "",
			"created": 1580440320000,
			"currentPoints": null,
			"description": "As a developer, I want the old enrollment flow code removed from the codebase.\n\nAcceptance criteria:\n\n* Feature flag has been removed\n* Old enrollment code has been removed\n\nNOTE: This shouldn’t be prioritized until we have done all the work around Enrollment Manager functionality & have the right data elements connected.",
			"epicId": "aeed08fe-3d9a-4265-835a-4c58cdeec6a7",
			"key": "EN-69",
			"originalPoints": null,
			"reporter": "pat",
			"status": "TO DO",
			"title": "Remove old enrollment flow",
			"type": "Story"
		},
		{
			"id": "f1e356c5-6529-47c6-8e48-4a8389402e6f",
			"acceptanceCriteria": "",
			"created": 1588043340000,
			"currentPoints": 3,
			"description": "",
			"epicId": "",
			"key": "EN-263",
			"originalPoints": 3,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Program membership creation from EpAdmin should have the correct program and provider combination",
			"type": "Bug"
		},
		{
			"id": "ad955725-574f-4515-a5ee-e794cadf0ba9",
			"acceptanceCriteria": "",
			"created": 1587007980000,
			"currentPoints": 2,
			"description": "https://tradeshift.slack.com/archives/CHBUB7Y2U/p1586921612007600\nScb Provider logo is not present as we do not allow sellers to view the enrollment via the in app process. While sending email it seems necessary and hence a sentry error.\n\n\nAcceptance criteria\n- Investigate and fix the sentry issue which causes SCB logo not present issue",
			"epicId": "",
			"key": "EN-238",
			"originalPoints": 2,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Scb provider logo does not exist error in sentry",
			"type": "Bug"
		},
		{
			"id": "73ce821a-61c2-4b89-87ab-3b0a40158619",
			"acceptanceCriteria": "",
			"created": 1587729900000,
			"currentPoints": 5,
			"description": "Background: In order to do KYC and credit checks, Blackstar employs a third party service called Aronova. We will have to provide them information during the enrollment process so that they can check the supplier.\n\nAcceptance Criteria:\n\n* After the supplier moves past the data entry screen on the enrollment flow\n* This should trigger sending their Legal Name field to Aronova\n* We should then accept:\n** Yes/No from Aronova\n** Single Invoice Limit\n** Pre Approval Limit\n** Overall Credit Limit \n* Apply those to the membership",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-261",
			"originalPoints": 5,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Aronova Data Exchange - BLACKSTAR",
			"type": "Story"
		},
		{
			"id": "cffb50eb-6dbc-4889-ab99-fd63f0fe7def",
			"acceptanceCriteria": "",
			"created": 1587729600000,
			"currentPoints": 3,
			"description": "Background: For credit protection we have to put in place limits for invoices that we fund for suppliers. There will be three types of credit limits:\n\n* Single Invoice Limit - largest dollar amount that we would fund off one invoice\n* Pre Approval Invoice Limit - largest invoice size we would fund pre-approval\n* Overall Credit Limit - Maximum aggregate exposure we would have to a supplier at any one time.\n\nAcceptance Criteria:\n\n* Once the information has been received from Aronova (EN-261)\n* Display them in the Receivables Purchase Agreement or enrollment form to the supplier before they sign it.\n\n",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-260",
			"originalPoints": 3,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Credit Limits into PDF for Enrollment - BLACKSTAR",
			"type": "Story"
		},
		{
			"id": "d388dac1-d33d-468d-93cc-2762a572d35d",
			"acceptanceCriteria": "",
			"created": 1586338140000,
			"currentPoints": 1,
			"description": "",
			"epicId": "",
			"key": "EN-195",
			"originalPoints": 1,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "The message displayed to program managers when they try to duplicate an enrollment is incorrect",
			"type": "Bug"
		},
		{
			"id": "7349c623-c769-42be-ab10-0d409c18c815",
			"acceptanceCriteria": "- All references of contactName should be removed\n- First name and last name data should be populated as part of migration from contactName",
			"created": 1587547140000,
			"currentPoints": null,
			"description": "Remove contactName and use contactFirstName and contactLastName and update the references from both frontend and backend.\n\nRight now in IEP we store Seller contact name , contact first name and contact last name in seperately. The idea is to remove the contact name (as the full name is not necessarily firstname + lastname, need to be decided on contextual basis) and add a migration to fill contact first name and contact last name from seller profile if required",
			"epicId": "",
			"key": "EN-256",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Remove contactName and use contactFirstName and contactLastName and update related references",
			"type": "Story"
		},
		{
			"id": "8039a0af-a772-453e-8553-a328324d6f4e",
			"acceptanceCriteria": "",
			"created": 1587525840000,
			"currentPoints": null,
			"description": "Background: We need an easy way for sales to demo our enrollment flow to a prospect. Then have it go back to the beginning of the process\n\nAC:\n\n* Click into the invite enrollment\n* See the data entry screen and input data\n* See and enter docs in the document screen\n* See the documentation screen and be able to finish the enrollment\n* Once enrollment is completed, reset to the INVITED state",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-253",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Demo for enrollment",
			"type": "Story"
		},
		{
			"id": "26513167-3029-4e6b-876f-613975879b36",
			"acceptanceCriteria": "",
			"created": 1586829960000,
			"currentPoints": null,
			"description": "Background: This will show the status of a supplier’s ability to finance and their payment redirection.\n\n!image (16).png|width=1085,height=197!\n\nAcceptance Criteria:\n\n* If the supplier has done their NOA change and ops has confirmed it. Then PAYMENT REDIRECTION COMPLETE should display as yes.\n** If not, display as no\n* If the NOA is done and the supplier is FUNDER APPROVED display ready to finance.",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-230",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Payment Redirection and Supplier Credit Review Approval",
			"type": "Story"
		},
		{
			"id": "e8e7aa18-9448-4fac-a358-bd69a68a2d61",
			"acceptanceCriteria": "",
			"created": 1586829480000,
			"currentPoints": null,
			"description": "Background: There will be a status tracker in the enrollment flow that shows how far along a user is in their enrollment journey. This will be tied to the supplier’s enrollment status.\n\n!image-20200413-165933.png|width=1240,height=560!\n\nAcceptance Criteria:\n\n* Once the status of displayed in the box is achieved the circle should be filled in.\n* Invite is sent - invited circle green\n* When they have started the enrollment and are IN PROGRESS - second circle (in progress) is green\n* When a user clicks the acceptance - third circle is green\n* While they are in TS REVIEW - fourth circle Tradeshift Review is green\n* When they are FUNDER APPROVED - top circle funder approved is green.",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-229",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Enrollment Status tracker",
			"type": "Story"
		},
		{
			"id": "930bd7a3-5cf8-499f-9823-4fefc5412047",
			"acceptanceCriteria": "",
			"created": 1586829060000,
			"currentPoints": null,
			"description": "!image-20200413-165205.png|width=802,height=1183!\n\n* Remove will be if the supplier is to be suspended from a program\n* Send back to seller - ops would use this if there is a problem with the data that it the seller has entered and they need to resubmit\n* Send to funder - this is when the ops user approves the supplier and their info is to be shared with the funder.\n\nAcceptance Criteria:\n\n* Display these CTAs at these statuses:\n\n|Status|CTA|CTA|CTA|\n|Draft| | | |\n|Invited|Remove| | |\n|In Progress|Remove|Send back to seller| |\n|TS Review|Remove|Send back to seller|Send to funder|\n|Credit Review|De-activate|Send back to seller|Funder Approved|\n|Funder Approved|De-activate| |Payment Redirection Completed|\n|Active|De-activate| | |",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-228",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Actions on each status - ops review",
			"type": "Story"
		},
		{
			"id": "cd2559f6-cff8-4a87-bc5b-43116dab6990",
			"acceptanceCriteria": "",
			"created": 1583220240000,
			"currentPoints": 1,
			"description": "Background: Companies House is the UK gov’t database of all their companies financials and corporate info. If there is good consistent data in the API we could use just the Companies House number to do all underwriting in the UK as well as verify supplier info.\n\nUser Value: Instead of having to produce multiple documents for TS a supplier can just provide their companies house number.\n\nLook into Companies House API documentation and sandbox environment to see if the use case works for us.\n\nAcceptance Criteria:\n\nMake an account\n\nPull out data from dummy account\n\nRecommendation as to if it is useful or not\n\n[https://developer-specs.companieshouse.gov.uk/guides/gettingStarted|https://developer-specs.companieshouse.gov.uk/guides/gettingStarted]",
			"epicId": "",
			"key": "EN-245",
			"originalPoints": 1,
			"reporter": "tba",
			"status": "TO DO",
			"title": "SPIKE - Investigate Companies House API",
			"type": "Story"
		},
		{
			"id": "5867b1b5-6e98-4d87-8559-2850e0fec2b8",
			"acceptanceCriteria": "- Add UI to add users in EPManager after the completed state.",
			"created": 1586929260000,
			"currentPoints": 3,
			"description": "Create new EP seller users after an enrollment is complete.\n\nThe API call is implemented to add users after an enrollment, but a UI does not show up to add users after the enrollment is complete.\n\nAdd this functionality in both EPManager and EPAdmin.",
			"epicId": "",
			"key": "EN-233",
			"originalPoints": 3,
			"reporter": "lnu",
			"status": "TO DO",
			"title": "[EPManager] Create new EP seller users after an enrollment is complete",
			"type": "Story"
		},
		{
			"id": "9ed9c415-6d0e-4564-b449-85e623d4e1ed",
			"acceptanceCriteria": "- The Endpoint is moved from the `ProviderProgram` controller to the `ProviderOnboarding` controller.\n- A raistone onboarding can be created in the sandbox environment with no problems.",
			"created": 1586690280000,
			"currentPoints": null,
			"description": "Oh no! The endpoint to create onboardings is in a weird place. It's separated from all the other onboarding endpoints, in the `ProviderProgram` controller. There's no technical reason why that endpoint shouldn't be in the `ProviderOnboarding` controller.",
			"epicId": "",
			"key": "EN-226",
			"originalPoints": null,
			"reporter": "brian.lutz",
			"status": "TO DO",
			"title": "Move `POST /providers/{provider_id}/onboardings/` endpoint to ProviderOnboardingController",
			"type": "Task"
		},
		{
			"id": "ff68bfb4-9e28-4004-be44-b594519150c4",
			"acceptanceCriteria": "",
			"created": 1585727220000,
			"currentPoints": null,
			"description": "As an As a enrollment manager viewing a seller enrollment \n\n* I want to see the most accurate status on a seller\n* Who is in the process of getting enrolled\n* So I can take the necessary to steps to enroll a seller\n\n*Acceptance Criteria*\n\n*To Dos*\n\n* Map to existing statuses\n* Validate against new funder\n\n\n\n!image-20200331-224958.png|width=921,height=558!\n\n!image-20200409-175840.png|width=2065,height=1027!",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-158",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "[Draft] New Seller/Enrollment Statuses",
			"type": "Story"
		},
		{
			"id": "32a5ce1c-3fa3-49dc-913a-0e38aa5feac1",
			"acceptanceCriteria": "",
			"created": 1584599460000,
			"currentPoints": 8,
			"description": "As a seller, I want to be able to submit my enrollment information in pieces and it should get recorded into different states. \n\nThis is important to see where sellers drop off during their enrollment.\n\nThis also allows the seller to always arrive to the last completed step in the enrollment flow as the current screen will be persisted in backend as an enrollment state and will be available for frontend to redirect to the appropriate screen.\n\nCurrent new enrollment flow is described as following:\n1) EPManager sends the invitation to seller to complete enrollment.\n2) Seller Enrollment now is now in INVITED state.\n3) Seller views the enrollment in START ENROLLMENT state (Feature flag true)\n4) Seller Clicks and lands on 1st Page (Company Info). Seller still in INVITED state.\n5) Seller completes page 1, moves to upload documentation page. Seller is now in IN_PROGRESS state.\n6) Seller completes page 2, moves to TOS check page. Seller still in IN_PROGRESS state.\n7) Seller completes page 3, completes and get thanks u dialog box. Seller moves to COMPLETED state.\nNOTE: Back button in the UI moves back and forth in IN_PROGRESS state.\nAcceptance criteria:\n\nCreate new states for Cash direct Enrollment flow as below based on the feature service flag and implement them as to follow this lifecycle:\n\n1) EPManager sends the invitation to seller to complete enrollment.\n2) Seller Enrollment now is now in INVITED state.\n3) Seller views the enrollment in START ENROLLMENT state (Feature flag true)\n4) Seller Clicks and lands on 1st Page (Company Info). Seller should be in IN_PROGRESS state.\n5) Seller completes page 1, moves to upload documentation page. Seller should be  in UPLOAD_DOCUMENTATION state.\n6) Seller completes page 2, moves to TOS check page. Seller should be  in  TOS_REVIEW state.\n7) Seller completes page 3, completes and get thanks u dialog box. Seller moves to COMPLETED state.\n\nNOTE: Back button in the UI should trigger demote API call to maintain states.",
			"epicId": "",
			"key": "EN-131",
			"originalPoints": 8,
			"reporter": "ashwini.rao",
			"status": "In Progress",
			"title": "Create and add different states to seller cash direct enrollment workflow",
			"type": "Story"
		},
		{
			"id": "55d00d28-f86b-461f-98a4-4307d6306e00",
			"acceptanceCriteria": "",
			"created": 1577162460000,
			"currentPoints": null,
			"description": "Given a supplier is changed to closed configured in salesforce\nWhen salesforce pushes us a supplier ID\nThen as sample invoice of every buyer connection should be pulled from the Data Lake API and saved to a supplier profile\n\nAcceptance Criteria:\n\n* Supplier goes into closed configured\n* This triggers an API call to Caspian getting a sample invoice for each buyer-supplier pair to be financed\n** This needs to be the most recent invoice of the buyer-supplier pair and it needs to be the full PDF view of it.\n* This is then saved to the supplier profile\n\n",
			"epicId": "",
			"key": "EN-39",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "As a program manager when a supplier is completed in salesforce invoice spot checks should automatically be pulled",
			"type": "Story"
		},
		{
			"id": "dcb31d5d-9343-4256-bf98-8e3b8fc0f761",
			"acceptanceCriteria": "",
			"created": 1577162400000,
			"currentPoints": null,
			"description": "Given a supplier is changed to closed configured in salesforce\nWhen salesforce pushes us a supplier ID\nThen the invoice history of that supplier should automatically be pulled and saved to the supplier profiles\n\nAcceptance Criteria:\n\n* When a supplier goes to closed configured in salesforce it should trigger - \n* 2 year invoice history pulled from Caspian for each buyer the supplier is working with on this program\n* These should be saved to a supplier profile\n\n",
			"epicId": "",
			"key": "EN-46",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "As a program manager invoice history should automatically be pulled",
			"type": "Story"
		},
		{
			"id": "95e213f2-ff0a-4db8-bcfe-bb2e720c0a07",
			"acceptanceCriteria": "",
			"created": 1584669060000,
			"currentPoints": 5,
			"description": "As part of our goal to have separation of enrollment concerns from IEP, we are going to use the strategy outlined in the Cash technical sync for modularization of the IEP. Step one being a data model review.\n\nThe team needs to identify the data model to be used in enrollment and all of the data needed for its domain.\n\n\nWe know that the current data model being used in IEP is mixing enrollment with memberships and that needs to be separated out as part of this work.\n\nThe AC for this:\n\n# Prepare data model of the old domain for review with Enrollment team\n# Make a data model for the new enrollment domain (modularization first approach)\n# Review new datamodel w/Cash engineering\n# Identify any shared data in single modules that would require code changes needed in IEP to accomplish the split if possible (optionally to help modularization later)",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-134",
			"originalPoints": 5,
			"reporter": "ngu",
			"status": "TO DO",
			"title": "Data model for Enrollment Review",
			"type": "Story"
		},
		{
			"id": "63d8c60e-9530-4232-afeb-848b3587fa33",
			"acceptanceCriteria": "",
			"created": 1579761960000,
			"currentPoints": 2,
			"description": "* Given a seller is being enrolled for a program\n* When the enrollment manager is choosing the pricing option\n* They should given a choice between “LIBOR +” or “FLAT”  for the field “Pricing Type”\n\nAcceptance criteria:\n* Enrollment creation form has fields to select \"LIBOR +\" or \"Flat\", same fields and label as program creation form\n* Enrollment creation form is defaulted with values selected in program creation",
			"epicId": "",
			"key": "EN-35",
			"originalPoints": 2,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Enable Seller Enrollment to Allow LIBOR",
			"type": "Story"
		},
		{
			"id": "97eebf4b-3f44-43ab-9792-54e44f88a09b",
			"acceptanceCriteria": "",
			"created": 1581583680000,
			"currentPoints": null,
			"description": "",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-87",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Rejected/Discontinued Sellers view",
			"type": "Story"
		},
		{
			"id": "498d2d35-b862-4091-8633-469a5d0c51c0",
			"acceptanceCriteria": "",
			"created": 1581583680000,
			"currentPoints": null,
			"description": "",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-86",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Approved Sellers View",
			"type": "Story"
		},
		{
			"id": "dec6f2ad-29bb-42a2-92ae-3f9f2ef353a6",
			"acceptanceCriteria": "",
			"created": 1581583680000,
			"currentPoints": null,
			"description": "",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-85",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Invited (+Enrollment in process) sellers view",
			"type": "Story"
		},
		{
			"id": "f085cdfd-eb2f-431a-82e7-24d1525667d1",
			"acceptanceCriteria": "",
			"created": 1581583620000,
			"currentPoints": null,
			"description": "",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-84",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Active Sellers View",
			"type": "Story"
		},
		{
			"id": "8a0f1f95-7b39-4037-b0ba-bfb8473a93e4",
			"acceptanceCriteria": "",
			"created": 1581409320000,
			"currentPoints": null,
			"description": "As an enrollment manager\n\nI want to view categories of sellers that are relevant to a cash program\n\nSo i can easily manage them\n\n\n\nAcceptance Criteria:\n\n* Following categories should be represented\n** *Eligible* but Not yet invited to a cash program\n** *Active* in cash program\n** Enrollment in process (*Enrolling?*)\n** Approved by credit manager and *ready to activate*\n** *Rejected* by credit manager or TS\n** *Discontinued*\n\n",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-82",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Seller categories displayed in the seller view",
			"type": "Story"
		},
		{
			"id": "bd9f4024-8c03-41b1-8a92-d9c1c5f12a36",
			"acceptanceCriteria": "",
			"created": 1580455920000,
			"currentPoints": 1,
			"description": "* As a enrollment manager viewing a seller enrollment \n* I want to see who accepted the terms and condition and on which date/time\n* IP address should be a captured too\n* So I know who to reach out to for any follow ups\n\n!image-20200331-224713.png|width=1632,height=1019!",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-75",
			"originalPoints": 1,
			"reporter": "vga",
			"status": "TO DO",
			"title": "EPManager should be able to view userID and date/time for agreement acceptance",
			"type": "Story"
		},
		{
			"id": "55f503bc-829d-47a9-a268-ebcd72875792",
			"acceptanceCriteria": "",
			"created": 1584681660000,
			"currentPoints": 8,
			"description": "We would need to create a skeleton of Cash enrollment service for having it interact with IEP and Salesforce data points.\n\nRight now IEP contains everything related to Enrollment within the platoform. The idea is to move and have a different service.\n\nAcceptance criteria:\n\n* Create a new K8 deployable enrollment service\n* Coordinate with Magnus/ Ricardo for setup related queries\n* Create a README of this document for how it is to be deployed\n* Create a new skeleton github repository for enrollment \n* To be able to call a dummy rest status API call to the new enrollment service\n\n",
			"epicId": "891d0a15-af0b-4530-8eb1-d00f66092eba",
			"key": "EN-136",
			"originalPoints": 8,
			"reporter": "ngu",
			"status": "TO DO",
			"title": "Skeleton Enrollment Service",
			"type": "Story"
		},
		{
			"id": "c6cc8c65-229e-4d38-a4d7-1924241ba6b9",
			"acceptanceCriteria": "",
			"created": 1585370100000,
			"currentPoints": null,
			"description": "Right now resource based validations are passed to either a mapper or at the service level.Please Add annotation based validation to OnboardingSupplierUserResource as a POC to add validation at resource leve and add a controller test to test the same.\n\nAcceptance criteria:\n - Add @notnull annotation to the resource instead of assert for OnboardingSupplierUserResource\n - Add Controller test to test the same",
			"epicId": "",
			"key": "EN-143",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Add annotation based validation to OnboardingSupplierUserResource",
			"type": "Task"
		},
		{
			"id": "761db484-cfd9-4f7c-8073-ff03cb29e408",
			"acceptanceCriteria": "",
			"created": 1585183320000,
			"currentPoints": null,
			"description": "Background: Supplier admins are the only ones who are able to see the dashboard. As a result many of the business users are not able to see the dashboard. When a business is enrolled in direct all users should have access to the dashboard automatically.\n\nAcceptance Criteria:\n\n* When a supplier is enrolled, all their users are automatically able to access the dashboard.",
			"epicId": "",
			"key": "EN-142",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Have dashboard enabled for all users automatically during enrollment",
			"type": "Story"
		},
		{
			"id": "763dca0f-5509-4944-82c6-247df521966f",
			"acceptanceCriteria": "",
			"created": 1584694920000,
			"currentPoints": null,
			"description": "Backround: The funder needs to do their own or verify that we did the proper KYC for the seller and then do the credit analysis. This should automatically happen when they are complete on our side.\n\nWhen a supplier goes through the entire enrollment process and their supplier profile is complete all the information should be sent to the funder. The process by which we send it to them will be determined once we talk to the funder more but likely will be SFTP.\n\nAcceptance Criteria:\n\n* Verify all the required fields in the supplier profile are present\n** Bank account verification\n** Enrollment Documentation\n** Bank account number\n** Routing number\n** Payment terms\n** Supplier Legal Name\n** Supplier Address\n** Buyers they want to transact with\n** Invoice spot check /per buyer\n** 2 year invoice history /per buyer\n\nThis will be subject to change once we finalize with the funder.",
			"epicId": "8537bf6f-7214-40bd-a448-fd168b274995",
			"key": "EN-139",
			"originalPoints": null,
			"reporter": "michael.beispel",
			"status": "TO DO",
			"title": "Completed supplier profile sent to funder",
			"type": "Story"
		},
		{
			"id": "f3db968b-a907-48f9-a7da-3faef1a5188a",
			"acceptanceCriteria": "",
			"created": 1579142640000,
			"currentPoints": 3,
			"description": "* Given a user is accepting the funder terms\n* When they click on it\n* Then their information should be tracked and stored in a database table\n\nAcceptance criteria:\n* The userId, date, time, and ip address for the person accepting the funding terms is logged\n* Able to pull a report of the data, along with user name and email from Tradeshift, to put in a spreadsheet",
			"epicId": "",
			"key": "EN-48",
			"originalPoints": 3,
			"reporter": "michael.beispel",
			"status": "Done",
			"title": "Record terms acceptance",
			"type": "Story"
		},
		{
			"id": "e3230465-4c0f-4dd8-8d3a-10ab5f321200",
			"acceptanceCriteria": "",
			"created": 1582366380000,
			"currentPoints": 3,
			"description": "As an end-user forced to use a super old browser, I don't want the app to break on me just because my company forces me to use outdated technology.\n\nAcceptance criteria:\n* New JS methods (e.g. Object.fromEntries()) are either compiled down backwards compatible JS or errors are thrown when used\n* Need to support Firefox 56, IE 11, last two versions of other browsers\n\nThings I tried that didn't work immediately:\n\nadding to package.json:\n\"browserslist\": \"last 2 versions, IE 11, Firefox 56\",\n\ncreating a .babelrc:\n{\n\t\"presets\": [\n\t\t[\n\t\t\t\"tradeshift-scripts/babel\",\n\t\t\t{\n\t\t\t\t\"targets\": {\n\t\t\t\t\t\"browsers\": [\"last 2 versions\", \"IE 11\", \"Firefox 56\"]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t]\n}",
			"epicId": "",
			"key": "EN-101",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Protect against errors when using new JS methods",
			"type": "Story"
		},
		{
			"id": "0a649172-90c5-492f-ae1f-ceda317c4022",
			"acceptanceCriteria": "",
			"created": 1582600140000,
			"currentPoints": 3,
			"description": "As a developer, I want to be more productive in the codebase so I can develop features faster with higher quality.\n\nAcceptance criteria:\n* Make a list of ways backend codebase can be improved to improve developer productivity\n* Team meeting to discuss list and decide which things to bring into backlog\n* Stories created in Jira",
			"epicId": "",
			"key": "EN-105",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Plans for improving backend codebase",
			"type": "Story"
		},
		{
			"id": "21ca8013-456b-499c-b08b-fb33536f1130",
			"acceptanceCriteria": "",
			"created": 1582600140000,
			"currentPoints": 3,
			"description": "As a developer, I want to be more productive in the codebase so I can develop features faster with higher quality.\n\nAcceptance criteria:\n* Make a list of ways frontend codebase can be improved to improve developer productivity\n* Team meeting to discuss list and decide which things to bring into backlog\n* Stories created in Jira",
			"epicId": "",
			"key": "EN-104",
			"originalPoints": 3,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Plans for improving frontend codebase",
			"type": "Story"
		},
		{
			"id": "ef19a045-d3cc-493c-96f0-412d9095820c",
			"acceptanceCriteria": "",
			"created": 1582601820000,
			"currentPoints": 2,
			"description": "As the development team, we want to to track metrics that are meaningful towards making an impact on our business and technical goals.\n\nAcceptance criteria:\n* Datadog dashboard created for enrollments team\n* Dashboard shows metrics tracked for GQM\n* Dashboard linked on team confluence page\n\nBackground: Nick wants us to create gqm goals based on dharma goals. Just make a list of goals, do 15, then prioritize to pick like three then do quality and metrics. Do both business and technical goals.\n\nPresentation: https://docs.google.com/presentation/d/1nUVdFcB2_PIGrfw5UfW-RoynQIMbWB7el0xghOZsDS4/edit#slide=id.p4",
			"epicId": "addccca5-fffe-4c1b-b20b-73904164dc3f",
			"key": "EN-108",
			"originalPoints": 2,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Create dashboard to report on GQM",
			"type": "Story"
		},
		{
			"id": "a257a674-3b74-4575-858b-265dcbcbacfb",
			"acceptanceCriteria": "",
			"created": 1581136380000,
			"currentPoints": null,
			"description": "Currently, we have various different types of unit testing methods in codebase. We have integration tests, integration tests with mocks, Mockito unit tests, Jersey controller tests, Spring data JPA Repository tests etc.\nFIS unit tests have integration and mocked tests with IEP remote system.\n\nAcceptance Criteria : \n* Clearly document and discuss with other teams, the strategy for when do we write which tests\n* Document and discuss the process surrounding writing new tests and build time costs associated with it\n* Document cleanup strategy for existing Backend tests: Both IEP and FIS",
			"epicId": "",
			"key": "EN-80",
			"originalPoints": null,
			"reporter": "ashwini.rao",
			"status": "TO DO",
			"title": "Document and discuss Backend unit test strategies amongst different Cash teams",
			"type": "Story"
		},
		{
			"id": "6cb4e91b-fb95-49ea-8bfc-f47139f14336",
			"acceptanceCriteria": "",
			"created": 1581583620000,
			"currentPoints": null,
			"description": "",
			"epicId": "4f3eda4e-c763-43b8-865b-af8cf2cd931a",
			"key": "EN-83",
			"originalPoints": null,
			"reporter": "vga",
			"status": "TO DO",
			"title": "Eligible Sellers View",
			"type": "Story"
		},
		{
			"id": "a1e6bfb6-5ce8-41b5-8209-534d4cd8b3ef",
			"acceptanceCriteria": "",
			"created": 1582366380000,
			"currentPoints": 2,
			"description": "As a developer, I want to be able to read the lines of code in Sentry that caused an error so I can better identify the cause of the error.\n\nAcceptance criteria:\n* Source maps are shipped to Sentry so errors are shown against unminified code\n* Source maps are not available to browsers in sandbox / production\n* If possible, source maps are available to browsers in local / kube-stack (create another story if not simple to include)",
			"epicId": "",
			"key": "EN-102",
			"originalPoints": 2,
			"reporter": "tst",
			"status": "TO DO",
			"title": "Add source maps to sentry",
			"type": "Story"
		},
		{
			"id": "56c63a2a-f342-41cb-a4a0-39199f9d2016",
			"acceptanceCriteria": "",
			"created": 1580782800000,
			"currentPoints": 1,
			"description": "* Given the supplier is presented the acceptance page\n* When they click the terms of service hyperlink\n* Then it should take them to [*http://support.tradeshift.com/knowledgebase/article/360011693319*|http://support.tradeshift.com/knowledgebase/article/360011693319]\n\nAcceptance criteria:\n* TOS link updated for Raistone enrollments\n* Able to verify in production",
			"epicId": "",
			"key": "EN-76",
			"originalPoints": 1,
			"reporter": "michael.beispel",
			"status": "Done",
			"title": "Update Raistone TOS link",
			"type": "Story"
		}
	]
}